# /---------------------------------------------------------------------------
# databaseInfoMap: (Required)
#
# The database information for the tasks of DBFlute.
# You should specify before your first generating.
#
# o driver   -- The class name of JDBC-Driver.
# o url      -- The URL for connecting database.
# o schema   -- The schema name.
# o user     -- The database user name.
# o password -- The database password.
# o propertiesMap -- The properties that depends on the database.
# o variousMap    -- The various settings about JDBC task.
#
# *The line that starts with '#' means comment-out.
#
map:{
	; driver		= com.microsoft.sqlserver.jdbc.SQLServerDriver
	; url			= df:dfprop/local-url.txt|jdbc:sqlserver://localhost:1433;databaseName=maihamadb;
	; schema		= dbo
	; user			= maihamadb
	; password		= df:dfprop/local-password.txt|maihamadb

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o propertiesMap: (NotRequired - Default 'map:{}')
    #  The properties that depends on the database.
    # 
    ; propertiesMap = map:{
        # If you use Oracle and its Synonym, specify this property.
        #; includeSynonyms=true
    }
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o variousMap: (NotRequired - Default 'map:{}')
    #  The various settings about JDBC task mainly.
    # 
    ; variousMap = map:{
        # o objectTypeTargetList: (NotRequired - Default 'list:{TABLE;VIEW}')
        #  If you want to include other object types in generating target,
        #  you should specify the list of included object types as adding.
        #  This is only for the main schema. Additional schemas are unconcerned.
        #    ex) Synonym of Oracle --> list:{TABLE ; VIEW ; SYNONYM}
        #
        #; objectTypeTargetList = list:{TABLE ; VIEW}

        # o tableExceptList: (NotRequired - Default 'list:{}')
        #  If you want to exclude some tables in generating target,
        #  you should specify the list of excepted table hints.
        #  This is only for the main schema. Additional schemas are unconcerned.
        #    ex) list:{PRODUCT_STATUS ; prefix:TMP_}
        #
        #; tableExceptList = list:{FOO_TABLE ; prefix:FOO_ ; suffix:_FOO ; contain:_FOO_}

        # o tableTargetList: (NotRequired - Default 'list:{}')
        #  If you want to include some tables in generating target expressly,
        #  you should specify the list of target table hints.
        #  This is only for the main schema. Additional schemas are unconcerned.
        #    ex) list:{PURCHASE ; contain:MEMBER}
        #
        #; tableTargetList = list:{FOO_TABLE ; prefix:FOO_ ; suffix:_FOO ; contain:_FOO_}

        # o columnExceptMap: (NotRequired - Default 'map:{}')
        #  If you want to exclude some columns in generating target,
        #  you should specify the list of excepted column hints.
        #  This is only for the main schema. Additional schemas are unconcerned.
        #    ex) map:{HEAVY_MASTER = list:{APP_NOT_USED_ID; suffix:_IMAGE}}
        #
        #; columnExceptMap = map:{
        #    ; FOO_TABLE = list:{FOO_COLUMN ; prefix:FOO_ ; suffix:_FOO ; contain:_FOO_}
        #}

        # o additionalSchemaMap: (NotRequired - Default map:{})
        #  If you want to include other schemas in generating target,
        #  you should specify the map of included schemas.
        #  Additional schemas have original settings apart from the main schema.
        #  The settings are objectTypeTargetList, tableExceptList,
        #  tableTargetList, and columnExceptMap.
        #  They have the same specification as ones of the main schema.
        #  Elements of this map are as below: 
        #    o objectTypeTargetList: (NotRequired - Default 'map:{TABLE;VIEW}')
        #    o tableExceptList: (NotRequired - Default list:{})
        #    o tableTargetList: (NotRequired - Default list:{})
        #    o columnExceptMap: (NotRequired - Default map:{})
        #    o isSuppressCommonColumn: (NotRequired - Default false)
        #    o isSuppressProcedure: (NotRequired - Default false)
        #
        #; additionalSchemaMap = map:{
        #    ; NEXTEXAMPLEDB = map:{
        #        ; objectTypeTargetList=list:{TABLE ; VIEW}
        #        ; tableExceptList=list:{FOO_TABLE ; prefix:FOO_ ; suffix:_FOO ; contain:_FOO_}
        #        ; tableTargetList=list:{FOO_TABLE ; prefix:FOO_ ; suffix:_FOO ; contain:_FOO_}
        #        ; columnExceptMap=map:{
        #            ; FOO_TABLE = list:{FOO_COLUMN ; prefix:FOO_ ; suffix:_FOO ; contain:_FOO_}
        #        }
        #        ; isSuppressCommonColumn=false
        #        ; isSuppressProcedure=false
        #    }
        #}

        # o typeMappingMap: (NotRequired - Default map:{NUMERIC=$$AutoMapping$$ ; DECIMAL=$$AutoMapping$$})
        #  If you want to change mappings from default mappings, you can specify your original mappings.
        #  But it is possible that unanticipated problems occurs, so be careful!
        #; typeMappingMap = map:{
        #    # AutoMapping for Numeric and Decimal, (1-9,0): INTEGER, (10-18,0): BIGINT, else: NUMERIC
        #    ; NUMERIC = $$AutoMapping$$ ; DECIMAL = $$AutoMapping$$
        #}
    }
    # - - - - - - - - - -/
}
# ----------------/
#
# Default mapping as follows:
# --------------------------------------------------------
# | JDBC Type     | Java Native          | CSharp Native |
# | ------------------------------------------------------
# | CHAR          | java.lang.String     | String        |
# | VARCHAR       | java.lang.String     | String        |
# | LONGVARCHAR   | java.lang.String     | String        |
# | NUMERIC       | java.math.BigDecimal | decimal?      |
# | DECIMAL       | java.math.BigDecimal | decimal?      |
# | TINYINT       | java.lang.Integer    | int?          |
# | SMALLINT      | java.lang.Integer    | int?          |
# | INTEGER       | java.lang.Integer    | int?          |
# | BIGINT        | java.lang.Long       | long?         |
# | REAL          | java.math.BigDecimal | decimal?      |
# | FLOAT         | java.math.BigDecimal | decimal?      |
# | DOUBLE        | java.math.BigDecimal | decimal?      |
# | DATE          | java.util.Date       | DateTime?     |
# | TIME          | java.sql.Time        | DateTime?     |
# | TIMESTAMP     | java.sql.Timestamp   | DateTime?     |
# | BIT           | java.lang.Boolean    | bool?         |
# | BOOLEAN       | java.lang.Boolean    | bool?         |
# | BINARY        | byte[]               | byte[]        |
# | VARBINARY     | byte[]               | byte[]        |
# | LONGVARBINARY | byte[]               | byte[]        |
# | BLOB          | byte[]               | byte[]        |
# | ARRAY         | *Unsupported         | *Unsupported  |
# | UUID          | java.util.UUID       | *Unsupported  |
# --------------------------------------------------------

